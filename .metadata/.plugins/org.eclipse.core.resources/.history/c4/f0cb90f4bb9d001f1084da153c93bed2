package com.customer.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.customer.entitty.Customer;
import com.customer.exception.CustomerNotFoundException;
import com.customer.service.CustomerService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;

@RestController
public class CustomerController {
	
	@Autowired
	private CustomerService service;
	
	@Autowired
	private ObjectMapper objectWriter;
	
	@PostMapping("/customer")
	public ResponseEntity<String> register(@RequestBody Customer customer){
		String message = service.saveCustomer(customer);
		return new ResponseEntity<>(message,HttpStatus.OK);
	}

	@GetMapping("/customer/{id}")
	public ResponseEntity<Customer> getCustomer(@PathVariable Integer id) throws CustomerNotFoundException{
		Customer customer = service.getCustomer(id);
		return new ResponseEntity<>(customer,HttpStatus.OK);
	}
	
	@PutMapping("/customer/update/{id}")
	public ResponseEntity<String> updateCustomer(@PathVariable Integer id, @RequestBody Customer customer) throws CustomerNotFoundException{
		String message = service.updateCustomer(id,customer);
		return new ResponseEntity<>(message,HttpStatus.OK);
	}
	
	@DeleteMapping("/customer/delete/{id}")
	public ResponseEntity<String> deleteCustomer(@PathVariable Integer id) throws CustomerNotFoundException{
		String message = service.deleteCustomer(id);
		return new ResponseEntity<>(message,HttpStatus.OK);
	}
	
	@GetMapping("/customers")
	public ResponseEntity<List<Customer>> getAllCustomers(){
		List<Customer> customers = service.getAll();
		return new ResponseEntity<>(customers,HttpStatus.OK);
	}
	
	@GetMapping(value="/customer/sort",produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<String> sort() throws JsonProcessingException{
		List<Customer> sortCustomers = service.sortCustomers();
		String writeValueAsString = objectWriter.writeValueAsString(sortCustomers);
		return new ResponseEntity<>(writeValueAsString,HttpStatus.OK);
	}
}
